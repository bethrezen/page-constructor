[
  {
    "id": 470,
    "slug": "devops",
    "createdAt": "2022-03-26T17:55:39.328Z",
    "updatedAt": "2022-06-10T13:10:37.919Z",
    "isDeleted": false,
    "pageId": 1141,
    "postDate": "2022-03-26T00:00:00Z",
    "isPinned": false,
    "migrated": true,
    "title": "Что такое DevOps и почему этот подход востребован",
    "shareTitle": null,
    "description": "DevOps (Development Operations) — это не столько профессия, сколько философия, культура взаимодействия между разработчиками ПО и командами эксплуатации.",
    "author": null,
    "sharedImage": null,
    "content": "DevOps (Development Operations) — это не столько профессия, сколько философия, культура взаимодействия между разработчиками ПО и командами эксплуатации. Сама идея сформировалась в 2007 году, когда назрела проблема эффективного сотрудничества команд разработки и эксплуатации: каждая сторона сразу обвиняла другую в различных сбоях. Грубо говоря, когда на стенде у разработчиков код запускался как надо, они с уверенностью отправляли его в работу. А когда возникали сбои, IT-команды заявляли, что проблема в коде и разбираться с ними должны разработчики.\r\n\r\nТакое «отфутболивание» увеличивало сроки выкатывания релизов и ухудшало качество продукта. А если за один релиз выкатывалось множество изменений, то становилось трудно понять, что стало причиной возникновения проблем при эксплуатации в «боевых» условиях. Эти проблемы стали предпосылками для формирования нового подхода к работе с цифровыми продуктами, который впоследствии назвали DevOps. Он отражал процесс объединения двух практик — разработки и эксплуатации — в один непрерывный процесс.\r\n\r\n<img style=\"border: 1px solid #DFDFDF;\" src=\"https://storage.yandexcloud.net/cloud-www-assets/blog-assets/ru/posts/2022/03/scale%20DevOps_1.png\" width=\"800\" alt=\"DevOps философия и процесс\"/>\r\n\r\n## Почему бизнесу нужен DevOps\r\n\r\nВнедрение DevOps будет полезно разным компаниям из разных отраслей и в разных ситуациях, особенно если они пользуются облачными решениями. Приведём несколько примеров, которые подтверждают важность практик DevOps.\r\n\r\n### Крупные мероприятия\r\n\r\nОнлайн-олимпиады, всероссийские конкурсы и другие мероприятия, которые охватывают всю страну и требуют слаженной работы большого количества специалистов. Кроме того, нужно настроить отказоустойчивую инфраструктуру, на которой будут крутиться приложения для организаторов и пользователей, которая будет хранить и обрабатывать полученные данные. Чтобы в условные сроки всё прошло как надо, необходимо заранее арендовать в облаке Yandex Cloud нужное количество серверов, настроить сеть, ОС и системы хранения данных, установить приложения и проверить всё в условиях, приближенных к боевым, — то есть провести нагрузочное тестирование. \r\n\r\nПодход DevOps уменьшит сроки подготовки к мероприятию, поможет сэкономить на закупке оборудования, его настройке и масштабировании. Если организовывать всё традиционным образом, придётся начинать работу намного раньше или же рисковать выполнением сроков. Кроме того, не стоит забывать про вероятность сбоев и простой дорогостоящего оборудования.\r\n\r\n### Разработка и тестирование\r\n\r\nВо многих крупных компаниях за инфраструктуру и железо отвечает один отдел, а за ОС и приложения — другой. Соответственно, развернуть тестовый стенд становится непросто: надо писать заявку в другой отдел, проводить закупку, если нужного оборудования нет, всё согласовывать и настраивать. Получается длинная цепочка исполнителей, каждый из которых делает свою работу в отрыве от других. И если что-то пошло не так, приходится долго выяснять, где проблема.\r\n\r\nВ ситуации со стендами для нагрузочного тестирования всё обстоит ещё сложнее. Такие стенды требуют больше ресурсов (и мощностей, приближенных к «боевым») на короткий промежуток времени. То есть согласование, сборка и настройка нагрузочного стенда может занять месяц, а на тестирование уйдёт день. Облачная инфраструктура [Yandex Cloud](/) позволяет за пару кликов развернуть или разобрать стенд. Подход DevOps в данной ситуации позволяет убрать лишние звенья в цепочке, максимально упрощая, ускоряя и удешевляя процесс разработки.\r\n\r\n### Быстрая обкатка приложений\r\n\r\nВ бизнесе побеждает тот, кто раньше выкатит новую фичу. Поэтому важно быстро проверять новые приложения и технологии, тестировать гипотезы. А для этого нужно уметь в сжатые сроки собирать пробные сервисы. Практики DevOps предполагают, что с помощью облаков можно, словно в конструкторе, собрать нужные элементы вместе:  базу данных, кеширующие сервисы, application-сервер и веб-сервер, чтобы получить рабочую систему, быстро проверить её возможности и решить, жизнеспособна ли она. А дальше можно масштабировать сервис и выкатывать его в продакшн либо разбирать ввиду непригодности.\r\n\r\nТрадиционный подход к разработке замедляет эти процессы, ведь нужно подавать запросы (а они легко теряются в очереди из других таких же), доказывать приоритетность своих запросов перед запросами других отделов. Теряется время, а с ним и шансы на лидерство в нише.\r\n\r\nПодробнее об использовании практик DevOps в этом видео:\r\n\r\n<div class=\"ytv-desktop\">\r\n<iframe width=\"100%\" height=\"500vw\" src=\"https://www.youtube.com/embed/m4A2HNeTUVA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n</div>\r\n\r\n## Преимущества DevOps\r\n\r\n* **Предсказуемость.** DevOps значительно снижает частоту отказов при выпуске новых релизов.\r\n\r\n* **Скорость.** Команды, которые работают по принципам DevOps, выкатывают качественные и стабильные релизы [в 208 раз чаще и в 106 раз быстрее](https://cloud.google.com/blog/products/devops-sre/the-2019-accelerate-state-of-devops-elite-performance-productivity-and-scaling).\r\n\r\n* **Поддерживаемость.** При появлении сбоя в новом релизе или отключении приложения легче восстановить его работоспособность и проще найти причину инцидента.\r\n\r\n* **Качество.** Синергия команд разработки и тестирования обеспечивает более высокую стабильность продукта, а использование облачных решений повышает качество разработки программного обеспечения.\r\n\r\n* **Конкурентоспособность.** Оптимизация доставки ПО вдвое уменьшает время выхода на рынок. Это может стать конкурентным преимуществом.\r\n\r\n* **Эффективность.** Сотрудничество разных команд повышает их эффективность, так как ускоряется процесс создания кода и его адаптация под среду, в которой он будет выполняться.\r\n\r\n* **Надёжность.** Практика CI/CD повышает качество продукта, делая изменения безопасными и эффективными.\r\n\r\n* **Безопасность.** Благодаря системам мониторинга, активным проверкам и другим методам повышается стабильность и отказоустойчивость продукта, сокращается количество багов, которые способны стать уязвимостями.\r\n\r\n## Ключевые идеи и практики DevOps\r\n\r\n**Непрерывная интеграция и доставка ПО (CI/CD).** Практика фактически реализует идею DevOps, так как предполагает постоянное изменение кода в центральном репозитории (например, [Yandex Managed Service for GitLab](/services/managed-gitlab)), где автоматически выполняется сборка, тестирование и запуск. Можно сказать, что CI/CD — это автоматизация тестирования и доставки новых компонентов разрабатываемого продукта всем участникам проекта. Такой подход к разработке ускоряет поиск и исправление ошибок, повышает качество ПО и уменьшает срок проверки и выпуска новых фич. Благодаря CI/CD удобнее поддерживать согласованность ПО на разных платформах.\r\n\r\n**Непрерывное тестирование.** Прогон кода через тесты — это самая надёжная защита от неприятных ошибок при эксплуатации. Разработчики закладывают метрики качества в код и собирают результаты тестов. Тестирование может быть и ручным, но обычно оно автоматизированное — так удобнее отслеживать изменения в коде и контролировать качество. Для DevOps-инженера это важно.\r\n\r\n**Мониторинг и автоматизация.** Автоматизировано должно быть всё, что можно. Это связано с важным для DevOps повышением уровня контроля. Среды, которые необходимы для работы конвейера развёртывания, создаются и уничтожаются автоматически с помощью скриптов. Ручные тесты остаются как запасной вариант. Развёртывание и тиражирование выполняются автоматически, с подстройкой средств мониторинга систем и приложений. Мониторинг важен, так как позволяет получать быструю обратную связь по только что выпущенным релизам. И если система мониторинга фиксирует сбой, который не удалось предотвратить до выпуска кода в продакшн, система может запустить автоматический откат изменений для обеспечения стабильности работы продукта. \r\n\r\n**Постоянное улучшение.** Существует правило, которое можно сформулировать следующим образом: «любые обнаруженные недостатки должны быть немедленно устранены». Рекомендуется повторять как можно чаще проблемные шаги, чтобы понять, что следует изменить или исправить, чтобы всё работало как надо.\r\n\r\n**Устранение сбоев не означает появление очередей.** Если в инфраструктуре что-то засбоило, проблемный элемент отключается и вместо него создаётся новый компонент на базе тех скриптов, которые уже проверены ранее и с помощью которых этот участок успешно создавался ранее. Это эффективно, когда IT-отдел управляет большим объёмом оборудования, например сотнями или тысячами серверов.\r\n\r\n**IaC (инфраструктура как код).** Суть идеи в том, что инфраструктура настраивается согласно тем же принципам, что и приложения. Здесь активно используются облачные решения и такие ресурсы, как виртуальные машины, сети, балансировщики, базы данных и&#160;т.&#160;д. Фактически эта DevOps-практика даёт возможность запускать не сотню различных файлов конфигурации, а только скрипт, который ежедневно включает нужное количество дополнительных машин, а вечером автоматически сокращает инфраструктуру в рамках лимита.\r\n\r\n**Микросервисы.** Принцип разработки приложений, который предполагает создание набора небольших служб, независимых друг от друга. Каждую из служб можно развёртывать и эксплуатировать отдельно, а друг с другом они взаимодействуют через интерфейс. За счёт разделения задач и независимого функционирования компонентов приложения удобнее использовать методики DevOps, например CI/CD.\r\n\r\nУзнайте, как внедрять DevOps и работать с облачной инфраструктурой: \r\n\r\n<div class=\"ytv-desktop\">\r\n<iframe width=\"100%\" height=\"500vw\" src=\"https://www.youtube.com/embed/AMKYJjyR-i4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n</div>\r\n\r\n## DevOps и облака\r\n\r\nКак уже было сказано ранее, облачные решения дают DevOps-инженеру большую свободу. Он получает требуемый уровень абстракции и переносит в облако основные компетенции, связанные с эксплуатацией инфраструктуры. Не нужно думать о том, как реализовывать систему виртуализации, как оркестрировать контейнеры и организовывать микросервисную архитектуру приложения — есть готовые сервисы, которые можно использовать.\r\n\r\nНо облачная инфраструктура — это не только новые возможности, но и новые требования к опыту. Для разработки небольшого и некритичного приложения может хватить одной виртуальной машины с веб-сервером и нескольких обычных разработчиков. Для сложного, постоянно меняющегося продукта необходимо привлекать DevOps-инженера с опытом работы в облаке. Сложность архитектуры и взаимосвязей между её компонентами требует более глубоких компетенций, чем у простого разработчика.\r\n\r\nЧтобы эффективно управлять разработкой на облачной платформе, нужно освоить работу с управляемыми базами данных, изучить основы организации отказоустойчивых систем и cloud-native-разработку. Можно попытаться сделать это самостоятельно путём проб и ошибок в собственной виртуальной инфраструктуре. Есть и более эффективный вариант: бесплатный курс «[Инженер облачных сервисов Yandex Cloud](https://practicum.yandex.ru/ycloud/)». Пройдя его и научившись разворачивать микросервисы в облаке, использовать бессерверные вычисления, работать с Docker-контейнерами в облаке и использовать Kubernetes, можно браться за более сложные задачи и продолжать развитие в сфере облачной разработки.\r\n\r\n## Инструменты DevOps\r\n\r\nУ каждого DevOps-инженера есть свой список инструментов и сервисов, которыми он предпочитает пользоваться. Но из-за того, что отрасль DevOps стремительно развивается, технологии и подходы к работе часто меняются. А вместе с ними меняются и рабочие инструменты. Мы предлагаем перечень сервисов, которые помогут эффективнее использовать возможности облачной платформы Yandex Cloud. Мониторинг, доставка трафика, отказоустойчивая архитектура и масштабирование, автоматизация управления жизненным циклом — с этими инструментами вы сможете построить эффективную и удобную экосистему для разработки и эксплуатации приложений.\r\n\r\n* [Tracker](/services/tracker) — сервис для совместной работы и организации процессов в компании. С  помощью Трекера удобно контролировать задачи всех отделов, подразделений, филиалов.\r\n\r\n* [Wiki](/services/wiki) — бесплатная база знаний для сотрудников вашей компании. Вы можете создавать новые вики-страницы, дополнять существующие страницы и актуализировать устаревшие сведения.\r\n\r\n* [Application Load Balancer](/services/application-load-balancer) — балансировщик нагрузки уровня приложения. Отвечает за распределение входящего трафика между разными компонентами веб-приложения.\r\n\r\n* [Certificate Manager](/services/certificate-manager) — сервис для управления сертификатами TLS. Позволяет использовать сертификаты самостоятельно или в интегрированных сервисах Yandex Cloud.\r\n\r\n* [Cloud CDN](/services/cdn) — организация сети распространения контента. Отвечает за быструю доставку пользователям статического контента за счёт его кеширования на географически распределённых CDN-серверах.\r\n\r\n* [Cloud Logging](/services/logging) — сервис, который агрегирует данные о работе пользовательских приложений и ресурсов Yandex Cloud в лог-группу. Данные каждой лог-группы хранятся отдельно.\r\n\r\n* [Container Registry](/services/container-registry) — сервис для управления Docker-образами, которые размещаются в отказоустойчивом хранилище с настроенной автоматической репликацией.\r\n\r\n* [Key Management Service](/services/kms) — сервис для управления криптографическими ключами. Позволяет защитить секреты и любую ценную информацию, которая хранится в облаке.\r\n\r\n* [Load Testing](/services/load-testing) — сервис для проведения нагрузочного тестирования и анализа производительности. Позволяет создавать настроенные виртуальные машины с  генераторами нагрузки в консоли управления.\r\n\r\n* [Lockbox](/services/lockbox) — сервис для управления секретами в инфраструктуре Yandex Cloud с  помощью консоли управления или API.\r\n\r\n* [Managed Service for GitLab](/services/managed-gitlab) — сервис для работы с DevOps-платформой GitLab в  инфраструктуре Yandex Cloud. Вы можете хранить код, проводить код-ревью, строить процессы разработки и релиза приложений в Yandex Cloud.\r\n\r\n* [Managed Service for Kubernetes](/services/managed-kubernetes) — сервис для управления кластерами Kubernetes. Позволяет подключаться к репозиторию в Yandex Container Registry, а также использовать в качестве узлов кластера Kubernetes серверы, расположенные вне Yandex Cloud.\r\n\r\n* [OPA Gatekeeper](https://github.com/open-policy-agent/gatekeeper) — приложение для создания настраиваемых политик управления ресурсами в кластере Kubernetes. Есть библиотека готовых политик, которая упрощает настройку конфигураций служб безопасности.\r\n\r\nБлагодаря облачным технологиям практики DevOps стали ближе к бизнесу. Разработчики в самых разных компаниях получили возможность легко и без серьёзных расходов собирать системы и тестировать гипотезы, автоматизировать поиск багов, повышать эффективность взаимодействия команд разработки и эксплуатации и за счёт всего этого быстрее разрабатывать ПО, выкатывать обновления, создавать новые фичи. Поэтому можно сказать, что философия DevOps сильно повлияла на отрасль и дала мощный стимул к развитию.",
    "locale": "ru",
    "isPublished": true,
    "blogPostId": 351,
    "image": "https://storage.yandexcloud.net/cloud-www-assets/constructor/storybook/images/img-black.png",
    "metaDescription": null,
    "keywords": null,
    "metaTitle": null,
    "readingTime": 10,
    "url": "/blog/posts/2022/03/devops"
  },
  {
    "id": 474,
    "slug": "speechkit-news",
    "createdAt": "2022-03-31T10:04:56.572Z",
    "updatedAt": "2022-06-21T12:29:31.803Z",
    "isDeleted": false,
    "pageId": 1143,
    "postDate": "2022-03-31T00:00:00Z",
    "isPinned": false,
    "migrated": true,
    "title": "Повышение качества голосов Yandex SpeechKit и объединение категорий «стандарт» и «премиум»",
    "shareTitle": "",
    "description": "В апреле вырастет качество голосов в сервисе Yandex SpeechKit и изменится тарификация.",
    "author": null,
    "sharedImage": null,
    "content": "В апреле вырастет качество голосов в сервисе Yandex SpeechKit и изменится тарификация.\r\n\r\n### Повышение качества голосов Yandex SpeechKit\r\n\r\nС 1 апреля 2022 года мы переводим все ML-модели стандартных голосов на трансформерную архитектуру. Это повысит качество их звучания до уровня премиум-голосов. Голоса станут звучать более естественно, в них станет меньше «железных» нот. Вы уже можете послушать их с помощью API в модели `general:rc`. Или в апреле в демо на [странице сервиса](https://cloud.yandex.ru/services/speechkit#demo).\r\n\r\nПереход на новые модели голосов произойдет автоматически — вам не придется менять код или запросы к API.\r\n\r\nГолоса категории «стандарт» до 31 мая 2022 года будут доступны в модели `general:deprecated` для случаев, когда невозможно перейти на новые голоса сразу.\r\n\r\n### Объединение категорий\r\n\r\nМы убираем разделение голосов на категории «стандарт» и «премиум». Теперь в Yandex SpeechKit будут доступны 7 голосов, звучащих одинаково качественно. Они будут отличаться только диктором, на чьем голосе основана модель, но не качеством.\r\n\r\n### Как объединение категорий повлияет на тарификацию\r\n\r\nС 13 апреля все голоса ветки `general` будут тарифицироваться одинаково. [Подробнее →](/docs/speechkit/pricing#prices-tts)\r\n\r\nС 13 апреля по 31 мая голоса на старой архитектуре в ветке `general:deprecated` будут тарифицироваться по [цене стандартных голосов (до 12 апреля)](/docs/speechkit/pricing#prices-tts).\r\n\r\nС 1 июня произойдет отключение голосов в ветке `general:deprecated`, и останется только ветка `general` с единой тарификацией.\r\n\r\nУсловия тарификации, прописанные в прямых договорах, останутся неизменными до конца срока действия договора.",
    "locale": "ru",
    "isPublished": false,
    "blogPostId": 353,
    "image": "https://storage.yandexcloud.net/cloud-www-assets/constructor/storybook/images/img-gray.png",
    "metaDescription": null,
    "keywords": null,
    "metaTitle": null,
    "readingTime": 11,
    "likes": 2,
    "hasUserLike": false,
    "url": "/blog/posts/2022/03/speechkit-news"
  },
  {
    "id": 476,
    "slug": "cloud-computing",
    "createdAt": "2022-04-02T18:38:30.914Z",
    "updatedAt": "2022-04-21T11:29:27.845Z",
    "isDeleted": false,
    "pageId": 1144,
    "postDate": "2022-04-02T00:00:00Z",
    "isPinned": false,
    "migrated": true,
    "title": "Что такое облачные вычисления. Обзор",
    "shareTitle": null,
    "description": "Облачные вычисления — это технология, которая обеспечивает доступ к компьютерным ресурсам через интернет. Не нужно покупать, хранить и обслуживать физическое оборудование — этим занимается облачный провайдер.",
    "author": null,
    "sharedImage": null,
    "content": "<ul>\r\n<li> <a href=\"#reasons\">Зачем нужны облачные вычисления</a></li>\r\n<li> <a href=\"#advantages\">Преимущества облачных вычислений</a></li>\r\n<li> <a href=\"#types-services\">Типы облачных услуг</a></li>\r\n<li> <a href=\"#platform\">Платформенные облачные сервисы</a></li>\r\n<li> <a href=\"#cloud-types\">Типы облаков</a></li>\r\n<li> <a href=\"#using\">Как бизнес использует облачные вычисления</a></li>\r\n<li> <a href=\"#choice\">Почему бизнес выбирает Yandex Cloud для облачных вычислений</a></li>\r\n</ul>\r\n\r\nОблачные вычисления — это технология, которая обеспечивает доступ к&#160;компьютерным ресурсам через интернет. Не&#160;нужно покупать, хранить и&#160;обслуживать физическое оборудование — этим занимается облачный провайдер. Пользователь&#160;же получает доступ к терминалу управления, в&#160;котором настраиваются характеристики виртуальных серверов и&#160;подключаются дополнительные сервисы. Объём ресурсов практически неограничен, а&#160;оплата производится по&#160;факту потребления. Это удобно: можно нарастить мощность, когда это нужно, и&#160;отключить всё лишнее, когда высокая производительность не&#160;требуется.\r\n\r\n<img style=\"border: 1px solid #DFDFDF;\" src=\"https://storage.yandexcloud.net/cloud-www-assets/blog-assets/ru/posts/2022/04/cloud-computing-1.png\" width=\"800\" alt=\"Облачные вычисления. Схема\"/>\r\n\r\n## Зачем нужны облачные вычисления {#reasons}\r\n\r\nДо появления облачных вычислений организациям приходилось хранить свои данные и&#160;развёртывать программное обеспечение на&#160;собственных серверах. И&#160;чем крупнее была организация, тем больше локальная инфраструктура. Вроде&#160;бы всё под присмотром, но&#160;есть важный недостаток — невозможность быстрого масштабирования при увеличении нагрузки. Например, если в&#160;период распродаж резко выросло число онлайн&#8209;заказов, то серверы могут «лечь», не&#160;справившись с&#160;наплывом покупателей. А&#160;это чревато упущенной прибылью. Чтобы этого не&#160;произошло, можно установить дополнительное оборудование, но&#160;такой подход затратен и неэффективен, ведь резервное железо будет простаивать большую часть времени. Да и на&#160;закупку, установку и&#160;настройку оборудования потребуется время, которого часто не&#160;хватает.\r\n\r\nОблачные технологии дают возможность более гибко управлять инфраструктурой. Благодаря виртуализации можно быстро собрать нужное количество серверов с желаемой производительностью. GPU, RAM, объём диска и&#160;другие параметры настраиваются за&#160;пару кликов. Если текущая конфигурация не&#160;справляется с&#160;нагрузкой, можно добавить ресурсы через панель управления. Кроме того, функция автомасштабирования позволяет автоматизировать этот процесс. \r\n\r\nСоответственно, не нужно покупать дорогую «железку», которая будет простаивать значительную часть времени. Можно арендовать её у&#160;облачного провайдера и&#160;пользоваться, когда это нужно. Использование облачных вычислений позволяет снизить время простоя оборудования и&#160;эффективнее использовать ресурсы. Поэтому многие организации вне зависимости от&#160;типа, размера и&#160;отрасли переходят на&#160;облачную модель работы — это выгодно и&#160;просто. \r\n\r\nКроме того, облака позволяют упростить организацию IT&#8209;систем. В&#160;любой момент времени можно получить нужное количество отлично работающих серверов, кластеров Kubernetes или СУБД — это действительно удобно. Ведь их не&#160;нужно настраивать и&#160;обновлять — этим занимается провайдер облачных услуг.\r\n\r\nОблачные платформы позволяют решать самые разные задачи. С&#160;их помощью, например, можно построить более надёжную систему резервного копирования и&#160;аварийного восстановления, внедрить [DevOps-практики](/blog/posts/2022/03/what-is-devops) в&#160;разработку, обучить искусственный интеллект, эффективно работать с&#160;Big Data и&#160;т.&#160;д. Например, финансовые организации используют облачные вычисления для создания цифровых отпечатков пользователей и&#160;совершенствования антифрод&#8209;систем, которые защищают деньги клиентов от&#160;мошенников. Разработчики видеоигр и&#160;медиакорпораций могут выполнять задачи по&#160;рендерингу объектов и&#160;задачи, связанные с&#160;доставкой контента (CDN).\r\n\r\n## Преимущества облачных вычислений {#advantages}\r\n\r\nНаверное, уже сейчас понятно, чем облачные решения отличаются от&#160;обычного хостинга. Под&#160;обычным хостингом понимается аренда вычислительных мощностей на&#160;определённое время. Объём выделяемых ресурсов обычно фиксирован, и&#160;при изменении нагрузки быстро масштабировать арендованные мощности невозможно. Приходится привлекать дополнительные ресурсы. \r\n\r\nПри использовании облачных ресурсов организация получает масштабируемую и&#160;отказоустойчивую инфраструктуру, в&#160;которой можно быстро запускать и&#160;останавливать виртуальные машины, менять их&#160;конфигурацию и&#160;переносить данные между ними. Какие ещё преимущества дают технологии облачных вычислений?\r\n\r\n* **Гибкость.** За считанные минуты можно подключить больше ресурсов для выполнения «тяжёлых» вычислительных процессов, развернуть пару десятков виртуальных рабочих столов для новых сотрудников, создать тестовую среду для обкатки нового приложения — облачные вычисления дают компаниям мобильность и&#160;гибкость, которые невозможны при&#160;использовании локальной инфраструктуры. \r\n\r\n* **Эластичность.** Не нужно покупать оборудование «про запас» задолго до&#160;того, как оно действительно понадобится. Благодаря облакам можно получить ровно столько ресурсов, сколько требуется для&#160;решения текущих задач. Оборудование не&#160;простаивает, а&#160;организация не&#160;зависит от&#160;отдела закупок.\r\n\r\n* **Экономия бюджета.** Облачные вычисления автоматизируют и удешевляют использование IT&#8209;инфраструктуры. Например, облачный сервер можно включить на&#160;два часа и&#160;заплатить только за&#160;это время, так как провайдеры практикуют оплату по&#160;схеме pay&#8209;as&#8209;you&#8209;go, то&#160;есть по&#160;факту потребления. При увеличении масштабов парка IT экономия средств становится значительной: нет лишних расходов.\r\n\r\n* **Снижение издержек.** Поддержка собственной вычислительной инфраструктуры требует денег на&#160;штатных IT&#8209;специалистов, регулярные обновления ПО и&#160;другие процедуры. Облака позволяют переложить эту ответственность на&#160;провайдера. Организации получают производительное оборудование с&#160;актуальным ПО, которое обслуживают компетентные специалисты. \r\n\r\n* **Стабильность.** Условия бесперебойной работы виртуальной инфраструктуры прописываются в&#160;договоре с&#160;провайдером (в рамках SLA). Так организации получают гарантии стабильной работы своих сервисов и&#160;финансовую защиту в&#160;случае возникновения проблем.\r\n\r\n* **Управляемость.** Организация может сама решить, какие ресурсы и&#160;в каком объёме она будет использовать. Для этого не&#160;нужно звонить менеджерам провайдера или оставлять заявки в&#160;техподдержке. С&#160;помощью личного кабинета или терминала в&#160;любой момент можно задать нужные параметры.\r\n\r\n* **Безопасность.** Уровень компетенций сотрудников облачного провайдера обычно выше, чем у&#160;сотрудников компаний&#8209;клиентов. Кроме того, провайдер использует оборудование и&#160;ПО промышленного уровня, что повышает безопасность и&#160;надёжность IT&#8209;систем.\r\n\r\n## Типы облачных услуг {#types-services}\r\n\r\nТрадиционно выделяют три основные модели облачных вычислительных услуг, предоставляемые провайдерами: IaaS, PaaS и SaaS. Они наиболее востребованы на&#160;рынке. \r\n\r\nОднако существуют и другие модели оказания услуг, которые стали набирать популярность в&#160;последние годы. Например, DBaaS, бессерверные и&#160;FaaS-вычисления. Давайте посмотрим, чем они отличаются.\r\n\r\n<img style=\"border: 1px solid #DFDFDF;\" src=\"https://storage.yandexcloud.net/cloud-www-assets/blog-assets/ru/posts/2022/04/cloud-computing-2.png\" width=\"800\" alt=\"Облачные услуги: IaaS, PaaS, SaaS\"/>\r\n\r\n### IaaS\r\n\r\nМодель IaaS (инфраструктура как сервис) предполагает, что пользователь получает доступ к&#160;виртуальным серверам, сетям, хранилищам и&#160;другим облачным вычислительным ресурсам на&#160;базовом уровне. Это похоже на&#160;традиционный способ работы с&#160;инфраструктурой, привычный большинству отделов IT. Единственное отличие в&#160;том, что оборудование находится в&#160;дата&#8209;центре провайдера облачных услуг. Возможность быстро регулировать производительность ресурсов в&#160;зависимости от&#160;текущих потребностей делает модель IaaS наиболее гибкой с&#160;точки зрения эксплуатации. \r\n\r\n### SaaS\r\n\r\nМодель SaaS (программное обеспечение как сервис) предполагает, что пользователь получает готовый продукт, который запускается и&#160;управляется поставщиком облачных услуг. Доступ к приложению осуществляется через браузер, API или программу&#8209;клиент на&#160;устройстве пользователя. По этой модели предоставляется бо́льшая доля платного ПО. Например, корпоративные базы данных, CRM, корпоративная почта, [анти-DDoS](/services/ddos-protection), [Kubernetes](/services/managed-kubernetes). К&#160;преимуществам этой модели услуг относятся автоматическое обновление приложений и&#160;защита от&#160;потери данных. \r\n\r\n### PaaS\r\n\r\nМодель PaaS (платформа как сервис) предполагает, что пользователь не&#160;занимается серверами, хранилищами и&#160;приложениями. Он просто выбирает из&#160;доступного списка серверы и&#160;среды, которые необходимы для запуска, тестирования, развёртывания, поддержки, обновления и&#160;масштабирования его приложений. Это повышает производительность работы, так как позволяет сосредоточиться на&#160;развёртывании приложений и&#160;управлении ими. Решения PaaS обычно создаются на&#160;основе технологии контейнеризации. \r\n\r\n## Платформенные облачные сервисы {#platform}\r\n\r\nГоворя о PaaS, необходимо упомянуть несколько наиболее востребованных подходов и сервисов, использующие облачные вычисления для ускорения процесса разработки и&#160;упрощения эксплуатации инфраструктуры. \r\n\r\n### Serverless\r\n\r\nМодель бессерверных вычислений предполагает, что все задачи по&#160;управлению облачной инфраструктурой возлагаются на&#160;провайдера, а&#160;пользователь концентрируется на&#160;создании кода и&#160;бизнес&#8209;логике разрабатываемых приложений. Во время работы пользователь получает контейнер или виртуальную машину для выполнения каждого запроса, а&#160;после завершения работы машина или контейнер уничтожаются. У&#160;Yandex Cloud есть решение для [бессерверных облачных вычислений](/solutions/serverless) с&#160;настроенным автоматическим масштабированием и&#160;платой только за&#160;использованные ресурсы.\r\n\r\n### FaaS\r\n\r\nМодель FaaS (функция как сервис) предполагает, что пользователь запускает функцию — часть кода приложения — в&#160;ответ на&#160;определённое событие, например на&#160;HTML&#8209;запрос. Со&#160;своей стороны провайдер предоставляет ресурсы для выполнения запуска. Благодаря FaaS разработчикам проще масштабировать код и&#160;вводить микросервисы.\r\n\r\n### DBaaS\r\n\r\nМодель DBaaS (база данных как сервис) предполагает, что пользователь может получить доступ к&#160;базе данных любого типа по&#160;запросу. Таким образом можно пользоваться преимуществами таких решений, не&#160;занимаясь вопросами управления базовыми технологиями и&#160;их поддержкой. Это снижает нагрузку на&#160;отдел IT и&#160;уменьшает сроки запуска проектов.\r\n\r\n### KaaS\r\n\r\nМодель KaaS (Kubernetes как сервис) предполагает, что пользователь получает удобно управляемую систему оркестрации контейнеров без необходимости обслуживания и&#160;администрирования IT&#8209;инфраструктуры. Автомасштабирование нагрузки в&#160;облачном Kubernetes обеспечивает доступность приложений для клиентов даже во&#160;время пиковых нагрузок.\r\n\r\n### IaC\r\n\r\nМодель IaC (инфраструктура как код) предполагает, что пользователь настраивает инфраструктуру аналогично тому, как создаёт ПО. Это DevOps&#8209;практика, благодаря которой можно автоматизировать управление инфраструктурой и&#160;конфигурациями.\r\n\r\n## Типы облаков {#cloud-types}\r\n\r\nСуществуют пять типов облаков: публичное, частное, мультиоблако, гибридное и&#160;Community Cloud. Каждый тип решает свои задачи.\r\n\r\n**Публичное облако.** Так называется один или несколько дата&#8209;центров, управляемых провайдером облачных услуг. Он обеспечивает работу облака и через интернет делает доступными все сервисы дата&#8209;центра: от&#160;SaaS&#8209;приложений вроде Microsoft Office 365 до&#160;виртуальных машин. Сервисы предоставляются по&#160;подписке или с&#160;платой за&#160;пользование. Так как облачные сервисы обладают высокой эластичностью и&#160;масштабируемостью, многие организации переносят в&#160;них часть своей инфраструктуры. Например, арендуют виртуальные машины или серверы в&#160;[Yandex Compute Cloud](/services/compute). Облачный провайдер берёт на&#160;себя ответственность за&#160;бесперебойную работу оборудования и инфраструктуры дата&#8209;центра и обеспечивает быстрый доступ к приложениям и данным. \r\n\r\n**Частное облако.** Так называется среда, в которой вся инфраструктура и вычислительные ресурсы принадлежат и эксплуатируются одной организацией. Частное облако обладает всеми названными преимуществами облачных вычислений, к&#160;которым добавляется контроль доступа, безопасность и&#160;настройка ресурсов под свои нужды. Yandex Cloud предоставляет своим клиентам сервис [Virtual Private Cloud](/docs/vpc/) для создания частного облака на&#160;мощностях Яндекса. Виртуальные машины, хранилища и&#160;базы данных в&#160;такой сети изолированы от&#160;трафика других клиентов и&#160;защищены от&#160;DDoS&#8209;атак при помощи сервиса Yandex DDoS Protection.\r\n\r\n**Гибридное облако.** Комбинация облачного и частного облака. В&#160;этой модели организация использует ресурсы собственного дата&#8209;центра, а&#160;в&#160;публичном облаке разворачивает отдельные сервисы, например платформу машинного обучения или систему оркестровки контейнеров Kubernetes в&#160;Yandex Cloud. Предназначение гибридного облака заключается в&#160;создании единой масштабируемой среды с&#160;сохранением контроля организации над критически важными данными.\r\n\r\n**Мультиоблако.** Подход, при котором используются решения нескольких облачных провайдеров. Такая модель развёртывания позволяет переносить данные от&#160;одного облачного провайдера к&#160;другому или одновременно развёртывать приложения и&#160;платформы у&#160;нескольких облачных провайдеров. Подход минимизирует вероятность сбоев, повышая надёжность и&#160;отказоустойчивость IT&#8209;инфраструктуры.\r\n\r\n**Community Cloud.** Это облако, которым пользуется ограниченное число компаний с&#160;похожими ценностями, например финансовые организации. При этом не&#160;важно, управляется ли оно сторонним облачным провайдером или принадлежит пользователям. \r\n\r\n## Как бизнес использует облачные вычисления {#using}\r\n\r\nО пользе облачных вычислений для бизнеса говорят много. Но как они реально помогают — не&#160;всегда ясно. Сейчас покажем.\r\n\r\nКомпания [VizorLabs](/cases/vizorlabs) внедряет технологии компьютерного зрения и видеоаналитики на&#160;производства. Компании требовалось гибкое управление сервисами: возможность подключать больше ресурсов во&#160;время обучения машинной модели и&#160;отключать их, когда модель обрабатывала входящий видеопоток. Также нужно было обеспечить удобное управление производительностью виртуальной инфраструктуры, чтобы быстро подбирать нужный объём vCPU и RAM, а&#160;для «тяжёлых» вычислений подключать GPU&#8209;сервера. Всё это предоставил Yandex Cloud.\r\n\r\nКомпания [RADAR](/cases/radar-ooh) создаёт независимую систему измерения аудитории наружной рекламы. Для получения релевантных результатов компания агрегирует Big Data из&#160;нескольких источников, ежедневно получая большие объёмы потоковых данных от&#160;сотовых операторов, платформ DMP и&#160;агрегатора данных мобильных приложений Start.io. Объём данных достигает 10&#160;ТБ в&#160;месяц, для их&#160;хранения используется [Yandex Object Storage](/services/storage). Использование облачной платформы позволило довести охват аудитории мобильных операторов до&#160;40%, а&#160;совокупное покрытие данных GPS — до&#160;90% населения страны.\r\n\r\n[Райффайзенбанк](/cases/raiffeisen) запустил голосового ассистента, чтобы улучшить клиентский сервис. Ассистент создан на&#160;базе облачного сервиса по&#160;синтезу и&#160;распознаванию речи [Yandex SpeechKit](/services/speechkit). Решение позволило не&#160;тратить деньги на&#160;собственную инфраструктуру и&#160;разработку, но&#160;при этом в&#160;короткие сроки запустить и&#160;продолжить развивать голосового помощника. Так, пилотную версию ассистента удалось запустить за&#160;три месяца с&#160;учётом разработки и&#160;подготовки. А&#160;сейчас ассистент обрабатывает 80% входящих звонков и в&#160;35% случаев отвечает на&#160;все вопросы клиентов без помощи человека.\r\n\r\nПодробно об инфраструктуре Yandex Cloud, её сервисах и инструментах рассказывает архитектор платформы Хамзет Шогенов в&#160;этом видео.\r\n\r\n<div class=\"ytv-desktop\">\r\n<iframe width=\"100%\" height=\"500vw\" src=\"https://www.youtube.com/embed/wjAjGMtx9zI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n</div>\r\n\r\n## Почему бизнес выбирает Yandex Cloud для облачных вычислений {#choice}\r\n \r\n[Yandex Cloud](https://auth.cloud.yandex.ru/agreement?client_id=yc.oauth.console&redirectUrl=https%3A%2F%2Fauth.cloud.yandex.ru%2Foauth%2Fauthorize%3Fresponse_type%3Dcode%26client_id%3Dyc.oauth.console%26scope%3Dopenid%26redirect_uri%3Dhttps%253A%252F%252Fconsole.cloud.yandex.ru%252Fauth%252Fcallback%26state%3DWZJWwFKl7uw9jbcrDwNwSw20mKshiUFeO1Ql5E) — это доступное облако для любых бизнес&#8209;задач. Организациям предлагаются производительные виртуальные CPU и GPU, объектное хранилище, сервис управления базами данных, технологии распознавания и&#160;синтеза речи и&#160;другие облачные технологии. Что именно привлекает бизнес в&#160;Yandex Cloud?\r\n \r\n**Проверенные технологии.** В основе облачной платформы — технологии, которые уже используются на&#160;других сервисах Яндекса, таких как Поиск, Карты, Метрика. При этом в компании продолжается разработка и&#160;внедрение новых решений, благодаря чему клиенты Yandex Cloud могут работать эффективнее, на&#160;шаг опережая конкурентов.\r\n \r\n**Простой старт.** В Yandex Cloud очень легко работать. Вся документация написана на&#160;русском языке и сопровождается понятными примерами, поэтому даже начинающий специалист сможет подключить и&#160;настроить облачные сервисы.\r\n \r\n**Решения под разные задачи.** В Yandex Cloud можно за несколько минут развернуть инфраструктуру под самые разные задачи. Выполнение сложного рендеринга, работа с&#160;отчётностью в&#160;1C, подготовка интернет-магазина к&#160;сезонному всплеску активности — организации могут самостоятельно управлять производительностью ресурсов, ориентируясь на&#160;свои потребности. Оплата — только за&#160;то, что использовали.\r\n \r\n**Фокус на продукте.** Многие сервисы Yandex Cloud автоматизированы и&#160;не&#160;требуют участия человека. Можно не&#160;отвлекаться на&#160;технические вопросы и&#160;заниматься развитием продукта.\r\n \r\n**Сервисы машинного обучения.** Обучение искусственного интеллекта, создание голосовых помощников и&#160;чат&#8209;ботов, научные исследования — технологии Yandex Cloud позволяют создавать будущее.\r\n \r\n**Безопасность и отказоустойчивость.** Три дата&#8209;центра Яндекса расположены в&#160;России в&#160;разных зонах доступности. Можно настроить дублирование (репликацию) данных в&#160;разные дата-центры, чтобы снизить риски и&#160;повысить общую отказоустойчивость инфраструктуры.\r\n \r\n**Понятно, за что платить.** В Yandex Cloud прозрачное ценообразование. То&#160;есть вы всегда знаете, сколько потратите, и&#160;можете спланировать бюджет. Для удобства есть [онлайн&#8209;калькулятор](/prices).\r\n\r\n[Попробовать Yandex Cloud ➞](https://auth.cloud.yandex.ru/agreement?client_id=yc.oauth.console&redirectUrl=https%3A%2F%2Fauth.cloud.yandex.ru%2Foauth%2Fauthorize%3Fresponse_type%3Dcode%26client_id%3Dyc.oauth.console%26scope%3Dopenid%26redirect_uri%3Dhttps%253A%252F%252Fconsole.cloud.yandex.ru%252Fauth%252Fcallback%26state%3DsQj2beqO6H9fzm5aFn30QFT1YUd6mulHG8mU)",
    "locale": "ru",
    "isPublished": true,
    "blogPostId": 354,
    "image": "https://storage.yandexcloud.net/cloud-www-assets/constructor/storybook/images/img-black.png",
    "metaDescription": null,
    "keywords": null,
    "metaTitle": null,
    "readingTime": 12,
    "likes": 1,
    "hasUserLike": false,
    "url": "/blog/posts/2022/04/cloud-computing"
  },
  {
    "id": 472,
    "slug": "microservice-architecture",
    "createdAt": "2022-03-30T18:48:27.493Z",
    "updatedAt": "2022-08-05T12:31:10.111Z",
    "isDeleted": false,
    "pageId": 1142,
    "postDate": "2022-03-01T00:00:00Z",
    "isPinned": false,
    "migrated": true,
    "title": "Микросервисная архитектура: что это, кому подойдёт, с чего начать",
    "shareTitle": null,
    "description": "Микросервисная архитектура: что это, кому подойдёт, с чего начать",
    "author": null,
    "sharedImage": null,
    "content": "* [Что такое микросервисная архитектура](#definition)\r\n\r\n* [Микросервисная архитектура против монолитной](#differences)\r\n\r\n* [Кому подойдёт использование микросервисной архитектуры](#suitable-clients)\r\n\r\n* [Какие инструменты использовать для создания микросервисов и работы с ними](#tools)\r\n\r\n* [Кто уже выбрал микросервисную архитектуру и наши инструменты для своих проектов](#current-projects)\r\n\r\n## Что такое микросервисная архитектура {#definition}\r\n\r\nЧем быстрее идея воплотится в&#160;новый продукт или в&#160;существующий проект, тем больше у вас шансов занять нишу и завоевать лояльность пользователей, а&#160;значит, стать успешнее и популярнее конкурентов. \r\n\r\nМикросервисная архитектура — это подход, который помогает не только ускорить разработку продукта, но и сделать ее гибкой и управляемой: проект из&#160;неделимого целого превращается в&#160;систему связанных между собой блоков — сервисов. Впервые о&#160;микросервисах заговорили ещё в&#160;2000&#8209;х, но концепция архитектуры сформировалась только к&#160;началу 2010&#8209;х. К 2014&#160;году технологию внедрили такие крупные компании, как Netflix, Amazon и Twitter. Сегодня микросервисный подход используют гораздо активнее. В 2020&#160;году в&#160;[отчёте Cloud Microservices Market Research](https://www.researchandmarkets.com/reports/4787543/cloud-microservices-market-growth-trends) рынок облачных микросервисов оценили в&#160;831,45&#160;млн долларов США. К 2026&#160;году его масштабы могут увеличиться более чем в&#160;три раза.\r\n\r\n## Микросервисная архитектура против монолитной {#differences}\r\n\r\nПриложение с микросервисной архитектурой разделено на&#160;небольшие не&#160;зависящие друг от друга компоненты — микросервисы. У каждого из&#160;них своя бизнес-задача: например, управлять каталогом, хранить и обновлять содержимое корзины или проводить оплату заказа.\r\n\r\nБлагодаря тому, что части приложения автономны, его, как и любую распределённую систему, легко развивать и обновлять: добавление или&#160;улучшение отдельных функций никак не повлияет на&#160;остальные компоненты. И это главное отличие микросервисного приложения от&#160;монолитного, в&#160;котором все блоки кода связаны между собой, и даже небольшие изменения хотя&#160;бы в&#160;одном из&#160;них поменяют работу всей&#160;системы.\r\n\r\nДля наглядности покажем, как выглядит архитектура микросервисов в&#160;Yandex Cloud.\r\n\r\n<img style=\"border: 1px solid #DFDFDF;\" src=\"https://storage.yandexcloud.net/cloud-www-assets/blog-assets/ru/posts/2022/03/microservices-3.png\" width=\"900\" alt=\"Микросервисная архитектура в Yandex Cloud\"/>\r\n\r\n<table width=\"100%\">\r\n<tr style=\"font-size: 110%;\">\r\n<td align=\"center\"><strong>Микросервисное приложение</strong></td>\r\n<td align=\"center\"><strong>Монолитное приложение</strong></td>\r\n</tr>\r\n<tr>\r\n<td colspan=\"2\" align=\"center\"><strong>Скорость релизов</strong></td>\r\n</tr>\r\n<tr>\r\n<td>Чтобы запустить новые функции или обновить существующие, достаточно изменить один модуль приложения. Это позволяет ускорить разработку и чаще выпускать обновления.</td>\r\n<td>Чтобы протестировать релиз и подготовить к&#160;нему приложение, нужно обновить всю систему, что может привести к&#160;неожиданным сбоям и увеличить время отладки.</td>\r\n</tr>\r\n<tr>\r\n<td colspan=\"2\" align=\"center\"><strong>Диапазон технологий</strong></td>\r\n</tr>\r\n<tr>\r\n<td>Для каждого сервиса можно использовать свой язык программирования, способ хранения данных, необходимые библиотеки.</td>\r\n<td>Код монолитного приложения — единое целое, поэтому вся команда должна придерживаться уже выбранных инструментов и методов.</td>\r\n</tr>\r\n<tr>\r\n<td colspan=\"2\" align=\"center\"><strong>Процесс разработки</strong></td>\r\n</tr>\r\n<tr>\r\n<td>Микросервисная архитектура позволяет вести гибкую разработку и при необходимости быстро изменить состав команды или требования к продукту.</td>\r\n<td>Монолитный подход более требователен к&#160;порогу вхождения: каждому новичку придётся полностью изучить код системы и её функциональность.</td>\r\n</tr>\r\n<tr>\r\n<td colspan=\"2\" align=\"center\"><strong>Оптимизация приложения</strong></td>\r\n</tr>\r\n<tr>\r\n<td>Управление ресурсами, инфраструктурой и функциональностью приложения можно доверить разным сервисам и оптимизировать каждый из них по отдельности.</td>\r\n<td>При оптимизации монолитного приложения нужно постоянно учитывать внутренние связи между его модулями: обновление хотя&#160;бы в&#160;одного из&#160;них приведёт к&#160;изменению системы в&#160;целом.</td>\r\n</tr>\r\n<tr>\r\n<td colspan=\"2\" align=\"center\"><strong>Масштабируемость</strong></td>\r\n</tr>\r\n<tr>\r\n<td>Если нагрузка на ресурсы микросервисов увеличится, они масштабируются автоматически. А&#160;гибкий процесс разработки позволит усилить команду дополнительными сотрудниками.</td>\r\n<td>Если вы решите изменить хотя&#160;бы один блок, придётся масштабировать всё приложение.</td>\r\n</tr>\r\n<tr>\r\n<td colspan=\"2\" align=\"center\"><strong>Отказоустойчивость</strong></td>\r\n</tr>\r\n<tr>\r\n<td>Проблемы внутри одного сервиса не нарушат работу системы в&#160;целом и не приведут к&#160;появлению новых ошибок.</td>\r\n<td>Все элементы монолитного приложения связаны друг с&#160;другом напрямую или косвенно: сбой внутри одного модуля может вызвать полный отказ системы</td>\r\n</tr>\r\n</table>\r\n\r\nКонечно, микросервисный подход не лишён недостатков. При кажущейся простоте и логичности деления большого продукта на самостоятельные сервисы разработка распределённой системы — процесс сложный и с&#160;технической, и с&#160;организационной точек зрения. Плюсы могут обернуться минусами:\r\n\r\n* Сбой одного сервиса не приведёт к&#160;полному отказу приложения, но любая распределённая система имеет и другие слабые места: потенциальные проблемы связи её элементов друг с&#160;другом, сетевые задержки, возможная неконсистентность данных. \r\n\r\n* Вы сэкономите, если будете платить только за те ресурсы, которые потребляют микросервисы, но должны будете предусмотреть расходы на&#160;внедрение облачных технологий, отдельное развёртывание каждого нового сервиса и его покрытие отдельными тестами и мониторингами. \r\n\r\n* Контролировать качество решения отдельных бизнес-задач проще и эффективнее, чем оценивать систему в&#160;целом, но настроить рабочие процессы большой команды разработчиков не так уж легко.\r\n\r\n## Кому подойдёт использование микросервисной архитектуры {#suitable-clients}\r\n\r\nЕсли вам или вашему проекту подходит хотя бы один пункт из&#160;этого списка,  задумайтесь об&#160;использовании микросервисов:  \r\n\r\n* **Большие коллективы.** Группам разработчиков, которые работают над&#160;разными микросервисами не нужно синхронизировать друг с&#160;другом каждый шаг, выбор инструментов и другие детали. Новые фичи можно разрабатывать параллельно и запускать по мере готовности. \r\n\r\n* **Объёмные проекты со сложной архитектурой.** Обновлять и поддерживать отдельные модули намного проще, чем контролировать, как&#160;изменения скажутся на&#160;системе в целом. \r\n\r\n* **Продукты с резко меняющимся трафиком.** Если вашим продуктом начинают чаще пользоваться в&#160;период праздников или распродаж, микросервисы позволят вам быстро масштабироваться и уменьшить риск отказа системы. К тому&#160;же вам не придётся платить за&#160;дополнительную инфраструктуру, которая нужна только в&#160;периоды пиковых нагрузок.   \r\n\r\n* **Приложения, требующие частых обновлений.** Достаточно изменить и отладить только тот модуль, который вы хотите обновить. Это&#160;существенно сокращает время разработки и приближает релиз.\r\n\r\nГоворят, что хороший микросервис должен быть небольшим, автономным, обходиться собственной изолированной базой данных и «закрывать» конкретную потребность. Чтобы проверить, стоит&#160;ли погружаться в&#160;мир микросервисов, спросите себя: можно&#160;ли разделить ваш продукт на&#160;простые независимые части?\r\n\r\n## Какие инструменты использовать для создания микросервисов и работы с ними {#tools}\r\n\r\nПопробуйте создать микросервисный проект с помощью инструментов Yandex Cloud. Мы собрали всё необходимое — можете разрабатывать и развивать архитектуру на одной платформе. \r\n\r\n1. Один из самых популярных способов создавать микросервисы — платформа контейнеризации Docker. Что такое контейнеры и как устроена эта платформа, мы рассказывали в&#160;[отдельной статье](/blog/posts/2022/03/docker-containers). Напомним: Docker — универсальный инструмент с&#160;открытым кодом, совместимый с&#160;Windows, Linux и macOS. С&#160;его помощью приложение отделяется от&#160;инфраструктуры: это значит, что вы сможете беспроблемно перемещаться между облачным и локальным хранилищем. Для управления образами и контейнерами Yandex Cloud предлагает [Yandex Container Registry](/services/container-registry) — отказоустойчивое хранилище с&#160;автоматической репликацией.\r\n\r\n2. Чтобы оркестрировать контейнеры, то есть управлять работой с ними, чаще всего используют кластеры Kubernetes®. Сервис [Yandex Managed Service for Kubernetes®](/services/managed-kubernetes) позволяет работать с&#160;серверами, расположенными вне платформы Yandex Cloud.\r\n\r\n3. Неотъемлемая часть любого микросервисного проекта — балансировщик. Именно благодаря ему такую архитектуру считают более устойчивой к&#160;отказам, чем монолитную: он контролирует, чтобы нагрузка на&#160;приложение распределялась по&#160;облачным ресурсам равномерно. Попробуйте [Yandex Network Load Balancer](/services/network-load-balancer). Чтобы регулировать входящий трафик разных компонентов веб&#8209;приложений, воспользуйтесь [Yandex Application Load Balancer](/docs/application-load-balancer/).\r\n\r\nБольше о современных облачных веб-сервисах и инструментах для работы с&#160;ними — на&#160;вебинаре архитектора Yandex Cloud Нарека Татевосяна:\r\n\r\n<div class=\"ytv-desktop\">\r\n<iframe width=\"100%\" height=\"500vw\" src=\"https://www.youtube.com/embed/3aFSyl7atKI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n</div>\r\n\r\n## Кто уже выбрал микросервисную архитектуру и наши инструменты для своих проектов {#current-projects}\r\n\r\n* [Умный поиск SearchBooster](/cases/searchbooster) полностью выстроил облачную инфраструктуру на Kubernetes. Через полтора года после переезда количество входящих поисковых запросов увеличилось в 150&#160;раз, а количество индексируемых данных — в&#160;сотни.\r\n\r\n* [Сервис Бухта](/cases/buhta), который помогает предпринимателям оцифровывать бухгалтерские и бизнес-процессы, втрое увеличил отзывчивость тестовых сред и на&#160;40% сократил расходы на&#160;инфраструктуру.\r\n\r\n* [Жилищная экосистема ВТБ «Метр квадратный»](/cases/vtb-m2) ускорила разработку и выпуск новых приложений, за&#160;неделю развернув 150 микросервисов на&#160;ресурсах Yandex Cloud.\r\n\r\n* [Центральный НИИ эпидемиологии](/cases/cmd-online) cправился с&#160;ежедневной обработкой десятков тысяч тестов на коронавирусную инфекцию в&#160;разгар пандемии, быстро нарастив вычислительные мощности.\r\n\r\nЕщё больше историй о микросервисных проектах, которые выбрали Yandex Cloud, вы найдете на&#160;[нашем сайте](/cases).\r\nПроверьте, подойдёт&#160;ли микросервисная архитектура для вашего проекта: [получите грант](/docs/free-trial/concepts/usage-grant) на&#160;тестирование инструментов Yandex Cloud.",
    "locale": "ru",
    "isPublished": true,
    "blogPostId": 352,
    "image": "https://storage.yandexcloud.net/cloud-www-assets/constructor/storybook/images/img-black.png",
    "metaDescription": null,
    "keywords": null,
    "metaTitle": null,
    "readingTime": 11,
    "likes": 1,
    "hasUserLike": false,
    "url": "/blog/posts/2022/03/microservice-architecture"
  }
]
